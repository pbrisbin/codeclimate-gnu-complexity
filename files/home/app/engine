#!/bin/sh
score_files() {
  find "$@" -type f -name "*.c" \
    -exec complexity --threshold="$threshold" {} +
}

parse() {
  local data_line='\s*([0-9]+)\s*([0-9]+)\s*([0-9]+)\s*(\.\/)?(.*)\(([0-9]+)\): (.*)'

  sed -r '/^'"$data_line"'$/!d; s//\1|\5|\6|\7/'
}

format() {
  while IFS="|" read -r score path line name; do
    printf "{"
    printf "\"type\":\"issue\","
    printf "\"check_name\":\"complex-definition\","
    printf "\"description\":\"High complexity in \`$name\`: [$score/$threshold]\"",
    printf "\"categories\":[\"Complexity\"],"
    printf "\"location\":{\"path\":\"$path\",\"lines\":{\"begin\":$line,\"end\":$line}},"
    printf "\"remediation_points\":$(remediation_points "$score"),"
    printf "\"severity\":\"normal\","
    printf "\"fingerprint\":\"gnu-complexity-$path-$name\""
    printf "}\0"
  done
}

score_each() {
  local path

  while IFS="\n" read -r path; do
    score_files "$path" | parse | format
  done
}

remediation_points() {
  local score=$1 base=1000000 over=70000

  echo $(( base + (over * (score - threshold)) ))
}

if [ -f /config.json ]; then
  threshold=$(jq --raw-output ".config.threshold" /config.json)

  if [ -z "$threshold" ] || [ "$threshold" = null ]; then
    threshold=30
  fi

  # Note: /config.json existing but without include_paths is not supported
  jq --raw-output ".include_paths | .[]" /config.json | score_each
else
  threshold=30

  score_files . | parse | format
fi
